---
# Default values for capstone-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
mongodb:
  replicaCount: 1
  image: mongo:4.4
  rootUsername: rootuser
  rootPassword: rootpass
  containerPort: 27017
  serviceName: mongodb
  servicePort: 27017

postgres:
  deploymentName: postgres
  replicaCount: 1
  image: postgres
  username: postgres
  password: "12345"
  database: cine_vision
  containerPort: 5432
  serviceName: postgres
  servicePort: 5432
  pgdata: /var/lib/postgresql/data/pgdata

apiGateway:
  deploymentName: api-gateway
  replicaCount: 1
  image: quockhanh107/api-gateway:latest
  containerPort: 8080
  javaOpts: "-Deureka.instance.preferIpAddress=true"
  serviceName: api-gateway
  serviceType: NodePort
  servicePort: 8080
  nodePort: 8080
  hpaName: "api-gateway-hpa"
  hpaMinReplicas: 1
  hpaMaxReplicas: 15
  hpaCpuUtilization: 50

emailService:
  deploymentName: email-service
  replicaCount: 1
  image: quockhanh107/email-service:latest
  containerPort: 8888
  serviceName: email-service
  serviceType: NodePort
  servicePort: 8888
  nodePort: 30003
  hpaName: email-service-hpa
  hpaMinReplicas: 1
  hpaMaxReplicas: 5
  hpaCpuUtilization: 50

eurekaServer:
  deploymentName: eureka-server
  replicaCount: 1
  image: quockhanh107/eureka-server:latest
  containerPort: 8761
  javaOpts: "-Deureka.instance.preferIpAddress=true"
  serviceName: eureka-server
  serviceType: NodePort
  servicePort: 8761
  nodePort: 30001
  hpaName: eureka-server-hpa
  hpaMinReplicas: 1
  hpaMaxReplicas: 5
  hpaCpuUtilization: 50


frontend:
  deploymentName: frontend
  replicaCount: 1
  image: quockhanh107/frontend-service:latest
  containerPort: 80
  serviceName: frontend-service
  servicePort: 80
  nodePort: 30000

movieService:
  deploymentName: movie-service
  replicaCount: 1
  image: quockhanh107/movie-service:latest
  containerPort: 8888
  serviceName: movie-service
  serviceType: NodePort
  servicePort: 8888
  nodePort: 8888
  hpaName: movie-service-hpa
  hpaMinReplicas: 1
  hpaMaxReplicas: 5
  hpaCpuUtilization: 50

userService:
  deploymentName: user-service
  replicaCount: 1
  image: quockhanh107/user-service:latest
  containerPort: 8890
  serviceName: user-service
  servicePort: 8890
  nodePort: 30005
  hpaName: user-service-hpa
  hpaMinReplicas: 1
  hpaMaxReplicas: 5
  hpaCpuUtilization: 50
